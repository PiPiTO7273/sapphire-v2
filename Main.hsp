
//	Sapphire v2.xx Project
//	(c) 2022 puoro.

//既知の不具合
// - SINGLEオプション使用時かつBPM変更地点がロングノーツ終点に存在する場合に、描画と判定がずれる
//   -> BPM変更地点に存在しないレーンのダミーオブジェクトを配置すると解決？？

#include"hsp3_64.as"
#include"hspint64.as"

#include"dxlib_x64.as"		//DXライブラリ
#include"bass_x64.as"		//BASS Audio Library
#include"a2d.hsp"			//Artlet2D
#include"kernel32.as"		//KERNEL32.DLL header
#include"mod_wininet64.hsp"	//WININET.DLL header
#include"mod_fx.as"			//式評価
#include"mod_strmidfix.hsp"	//strmid命令の高速化
#include"dirlist2.hsp"		//hspextのdirlist2を再現

#uselib "user32.dll"
#func EnumDisplaySettings "EnumDisplaySettingsA" sptr,sptr,sptr

goto*Startup

#include"mod_Debug.hsp"				//デバッグ関連
#include"mod_dxlibplus.hsp"			//DXライブラリ拡張命令
#include"mod_v2zip.hsp"				//データ圧縮
#include"mod_4bithex.hsp"			//バイナリ→文字列変換
#include"mod_BinPkg.hsp"				//バイナリパッケージ
#include"NameSpace.hsp"				//グローバル空間の定数・マクロ
#include"StringTable.hsp"			//文字列の配列
#include"func_Default.hsp"			//基本命令・関数
#include"PortalSync.hsp"				//IR同期関連
#include"duioparse.hsp"				//Dynamic UI Language (Input-Output Module)
#include"scene_CommonLayer.hsp"		//共通レイヤー
#include"scene_Title.hsp"			//タイトル画面
#include"scene_Lobby.hsp"			//ロビー
#include"scene_MusicSelect.hsp"		//楽曲選択画面
#include"scene_Gameplay.hsp"			//ゲームプレイ
#include"scene_Result.hsp"			//リザルト
#include"scene_Store.hsp"			//ストア
#include"scene_Mission.hsp"			//ミッション
#include"scene_Tutorial.hsp"			//チュートリアル
#include"scene_Profile.hsp"			//プロフィール編集
#include"scene_ErrorDialog.hsp"		//エラーダイアログ
#include"scene_Config.hsp"			//システム設定

#epack"start.ax"
#packopt hide 1

*Startup

	gsel 0,-1

	onexit*Exit
	;onerror*SystemError

	sdim dir_default
	dir_default=dir_cur

	gosub*DrawInitDebugMsg

	//セーブデータ読み込み
		logmes GetTimeStamp()+" Loading savedata \""+"contents/savedata.bin"+"\""
		exist"contents/savedata.bin"
		if strsize==-1 {
			CreateDefaultSaveData
		}
		sdim ClientSaveData,strsize
		bload"contents/savedata.bin",ClientSaveData

	//復号化
		logmes GetTimeStamp()+" Decrypting savedata (seed="+8881109+")"
		randomize 8881109
		repeat strsize
			poke ClientSaveData,cnt,peek(ClientSaveData,cnt)^rnd(256)
		loop
		randomize

	//シグネチャを確認
		if (peek(ClientSaveData,0)=='s'&peek(ClientSaveData,1)=='2'&peek(ClientSaveData,2)=='s'&peek(ClientSaveData,3)=='*')==FALSE {
			OpenErrorDialog"S2S0001"
			end
		}

	//設定読み込み
		dim OnlineFlag:OnlineFlag=FALSE
		dupptr DispWidth,varptr64(ClientSaveData)+4,4,vartype("int")
		dupptr DispHeight,varptr64(ClientSaveData)+8,4,vartype("int")
		dupptr BufWidth,varptr64(ClientSaveData)+12,4,vartype("int")
		dupptr BufHeight,varptr64(ClientSaveData)+16,4,vartype("int")
		dupptr duioScenePath,varptr64(ClientSaveData)+32,64,vartype("str")
		dupptr PlayerID,varptr64(ClientSaveData)+96,64,vartype("str")
		dupptr PlayerPassword,varptr64(ClientSaveData)+160,64,vartype("str")
		dupptr HTTPproxy,varptr64(ClientSaveData)+224,64,vartype("str")

		dupptr csconf_ScreenMode,varptr64(ClientSaveData)+288,4,vartype("int")
		dupptr csconf_DispResolution,varptr64(ClientSaveData)+292,4,vartype("int")
		dupptr csconf_SubThreadLimit,varptr64(ClientSaveData)+296,4,vartype("int")
		dupptr csconf_TextureLevel,varptr64(ClientSaveData)+300,4,vartype("int")
		dupptr csconf_Antialias,varptr64(ClientSaveData)+304,4,vartype("int")
		dupptr csconf_proxyIP,varptr64(ClientSaveData)+308,64,vartype("str")
		dupptr csconf_proxyPort,varptr64(ClientSaveData)+372,64,vartype("str")

		dim hdximg,iBuffer_Max
		gosub*ApplyClientConfig

		logmes GetTimeStamp()+" Loading system settings..."
		logmes GetTimeStamp()+" - Display : "+DispWidth+"x"+DispHeight
		logmes GetTimeStamp()+" - Buffer : "+BufWidth+"x"+BufHeight
		logmes GetTimeStamp()+" - Internet Ranking ID : "+PlayerID
		logmes GetTimeStamp()+" - HTTP Proxy : "+HTTPproxy

	//文字列テーブル
		gosub*LoadStringTable

	//DXライブラリ初期化
		logmes GetTimeStamp()+" Initializing DirectX..."
		SetOutApplicationLogValidFlag FALSE
		SetAlwaysRunFlag TRUE

		SetGraphMode DispWidth,DispHeight
		switch csconf_ScreenMode
			case 0	//ウィンドウモード
				ChangeWindowMode TRUE
				SetUseASyncChangeWindowModeFunction TRUE,0
				SetChangeScreenModeGraphicsSystemResetFlag FALSE
			swbreak
			case 1	//フルスクリーンモード
				ChangeWindowMode FALSE
			swbreak
			case 2	//枠なしウィンドウモード
				chgdisp 1,DispWidth,DispHeight
				bgscr 0,DispWidth,DispHeight,0,0,0
				SetUserWindow hwnd
			swbreak
		swend
		;SetWindowVisibleFlag FALSE
		;SetWaitVSyncFlag FALSE
		
		SetMainWindowText"SAPPHIRE"
		DxLib_Init
		if MSAAflag :SetDrawMode DX_DRAWMODE_BILINEAR
		SetUsePremulAlphaConvertLoad TRUE
		SetMouseDispFlag FALSE

		dim hdximg_preloader,90
		dim preloader_interval
		dim preloader_framecount
		cfunc64v LoadDivGraph,"contents/graphic/common_Preloader.png",90,1,90,300,64,varptr64(hdximg_preloader)

		//DirectXバージョン出力
		sdim dxversionarr:dxversionarr="[ERROR]","9","9 EX","11"
		logmes GetTimeStamp()+" - DirectX API version : "+dxversionarr(GetUseDirect3DVersion())

		SetUseLighting FALSE
		SetCameraNearFar d2f(100),d2f(4000)

		LoadAllImgResource

	//BASS audio library初期化
		logmes GetTimeStamp()+" [bass] Initializing audio component..."

		BASS_Init -1,44100,0,0,NULL
		if stat==FALSE {
			logmes GetTimeStamp()+" [Warning] Failed to initialize audio component"
		}

		BASS_SetConfig BASS_CONFIG_DEV_PERIOD,1

		dim struct_BASS_INFO,14
		cfunc64v BASS_GetInfo,varptr64(struct_BASS_INFO)

		logmes" - Audio output rate : "+struct_BASS_INFO(13)+" hz"
		logmes" - Minimum audio buffer size : "+struct_BASS_INFO(8)+" ms"
		logmes" - Average audio latency : "+struct_BASS_INFO(10)+" ms"

		//バッファサイズ設定
		dim BASS_AudioBufferSize
		BASS_AudioBufferSize=AudioBufferSize
		if BASS_AudioBufferSize==0 {
			//自動（最小サイズに設定）
			BASS_AudioBufferSize=struct_BASS_INFO(8)
		}
		BASS_SetConfig BASS_CONFIG_BUFFER,BASS_AudioBufferSize
		BASS_SetConfig BASS_CONFIG_UPDATEPERIOD,BASS_AudioBufferSize/2
		BASS_SetConfig BASS_CONFIG_UPDATETHREADS,4

	//UI構成初期化
		duio_Init
		duio_LoadFontData"contents/fontdata"
		duio_LoadSoundData"contents/sound/data.txt"
		duio_LoadScript duioScenePath,duioScenePath+".tmp"
		duio_SetButtonHoverSound"hover"

	//キー登録
		#addition"puorosvc.key"

	//画像読み込み
		SetDXArchiveExtension"bin"
		dim hcommonLayer:hcommonLayer=MakeScreen(BufWidth,BufHeight,TRUE)
		hdximg(ibg_common)=LoadGraph("contents/video/background.ogv")

		hdximg(itmplayer)=MakeScreen(BufWidth,BufHeight,TRUE)

		hdximg(ishape_commonbg)=LoadGraph("contents/graphic/common_bg_parts.png")
		hdximg(icommon_ironline)=LoadGraph("contents/graphic/common_ironline.png")
		hdximg(icommon_bglayer)=LoadGraph("contents/graphic/common_bg_layer.png")
		hdximg(icommon_cursor)=LoadGraph("contents/graphic/common_cursor.png")

		hdximg(imusicselect_bg_songitem)=LoadGraph("contents/graphic/musicselect_songitem.png")
		hdximg(imusicselect_item_normal)=LoadGraph("contents/graphic/musicselect_item_normal.png")
		hdximg(imusicselect_item_hard)=LoadGraph("contents/graphic/musicselect_item_hard.png")
		hdximg(imusicselect_item_chaos)=LoadGraph("contents/graphic/musicselect_item_chaos.png")

		hdximg(imusicselect_folder_all)=LoadGraph("contents/graphic/musicselect_button_folder_all.png")
		hdximg(imusicselect_folder_alllv)=LoadGraph("contents/graphic/musicselect_button_folder_alllv.png")
		hdximg(imusicselect_folder_lv1_4)=LoadGraph("contents/graphic/musicselect_button_folder_lv1-4.png")
		hdximg(imusicselect_folder_lv5_8)=LoadGraph("contents/graphic/musicselect_button_folder_lv5-8.png")
		hdximg(imusicselect_folder_lv9_11)=LoadGraph("contents/graphic/musicselect_button_folder_lv9-11.png")
		hdximg(imusicselect_folder_lv12)=LoadGraph("contents/graphic/musicselect_button_folder_lv12.png")
		hdximg(imusicselect_folder_ex)=LoadGraph("contents/graphic/musicselect_button_folder_ex.png")
		hdximg(imusicselect_folder_s)=LoadGraph("contents/graphic/musicselect_button_folder_s.png")
		hdximg(imusicselect_folder_aaa)=LoadGraph("contents/graphic/musicselect_button_folder_aaa.png")
		hdximg(imusicselect_folder_aa)=LoadGraph("contents/graphic/musicselect_button_folder_aa.png")
		hdximg(imusicselect_folder_a)=LoadGraph("contents/graphic/musicselect_button_folder_a.png")
		hdximg(imusicselect_folder_failed)=LoadGraph("contents/graphic/musicselect_button_folder_failed.png")
		hdximg(imusicselect_folder_assist)=LoadGraph("contents/graphic/musicselect_button_folder_assist.png")
		hdximg(imusicselect_folder_clear)=LoadGraph("contents/graphic/musicselect_button_folder_clear.png")
		hdximg(imusicselect_folder_expert)=LoadGraph("contents/graphic/musicselect_button_folder_expert.png")
		hdximg(imusicselect_folder_madness)=LoadGraph("contents/graphic/musicselect_button_folder_madness.png")
		hdximg(imusicselect_folder_fc)=LoadGraph("contents/graphic/musicselect_button_folder_fc.png")
		hdximg(imusicselect_folder_allex)=LoadGraph("contents/graphic/musicselect_button_folder_allex.png")
		hdximg(imusicselect_folder_normal)=LoadGraph("contents/graphic/musicselect_button_folder_normal.png")
		hdximg(imusicselect_folder_hard)=LoadGraph("contents/graphic/musicselect_button_folder_hard.png")
		hdximg(imusicselect_folder_chaos)=LoadGraph("contents/graphic/musicselect_button_folder_chaos.png")
		hdximg(imusicselect_folder_s1)=LoadGraph("contents/graphic/musicselect_button_folder_s1.png")

		hdximg(imusicselect_sort_default)=LoadGraph("contents/graphic/musicselect_button_sort_default.png")
		hdximg(imusicselect_sort_name)=LoadGraph("contents/graphic/musicselect_button_sort_name.png")
		hdximg(imusicselect_sort_level)=LoadGraph("contents/graphic/musicselect_button_sort_level.png")
		hdximg(imusicselect_sort_score)=LoadGraph("contents/graphic/musicselect_button_sort_score.png")
		hdximg(imusicselect_sort_bpm)=LoadGraph("contents/graphic/musicselect_button_sort_bpm.png")
		hdximg(imusicselect_sort_cleartype)=LoadGraph("contents/graphic/musicselect_button_sort_cleartype.png")

		hdximg(imusicselect_itemscroll_circle)=LoadGraph("contents/graphic/musicselect_itemscroll_circle.png")

		hdximg(imusicselect_ir)=MakeScreen(290,116,TRUE)

		hdximg(imusicselect_ir_icon_1)=LoadGraph("contents/graphic/musicselect_ir_icon_1.png")
		hdximg(imusicselect_ir_icon_2)=LoadGraph("contents/graphic/musicselect_ir_icon_2.png")
		hdximg(imusicselect_ir_icon_3)=LoadGraph("contents/graphic/musicselect_ir_icon_3.png")
		hdximg(imusicselect_ir_icon_other)=LoadGraph("contents/graphic/musicselect_ir_icon_0.png")

		hdximg(imusicselect_levelsel_normalorg)=LoadGraph("contents/graphic/musicselect_levelselect_normal.png")
		hdximg(imusicselect_levelsel_normal)=MakeScreen(200,66,TRUE)
		hdximg(imusicselect_levelsel_hardorg)=LoadGraph("contents/graphic/musicselect_levelselect_hard.png")
		hdximg(imusicselect_levelsel_hard)=MakeScreen(200,66,TRUE)
		hdximg(imusicselect_levelsel_chaosorg)=LoadGraph("contents/graphic/musicselect_levelselect_chaos.png")
		hdximg(imusicselect_levelsel_chaos)=MakeScreen(200,66,TRUE)

		hdximg(imusicselect_item_locked)=LoadGraph("contents/graphic/musicselect_songitem_locked.png")
		hdximg(imusicselect_levelsel_locked)=LoadGraph("contents/graphic/musicselect_levellocked.png")

		hdximg(iplayoption_enabled_120)=LoadGraph("contents/graphic/playoption_button_enabled_120.png")
		hdximg(iplayoption_enabled_180)=LoadGraph("contents/graphic/playoption_button_enabled_180.png")

		hdximg(istore_item_map)=LoadGraph("contents/graphic/store_item_song.png")
		hdximg(istore_item_customize_note)=LoadGraph("contents/graphic/store_item_customize_note.png")
		hdximg(istore_ticket1)=LoadGraph("contents/graphic/store_item_ticket_x1.png")
		hdximg(istore_ticket10)=LoadGraph("contents/graphic/store_item_ticket_x10.png")
		hdximg(istore_fragment1)=LoadGraph("contents/graphic/store_item_fragment_x1.png")
		hdximg(istore_fragment5)=LoadGraph("contents/graphic/store_item_fragment_x5.png")
		hdximg(istore_fragment10)=LoadGraph("contents/graphic/store_item_fragment_x10.png")
		hdximg(istore_show_purchased_on)=LoadGraph("contents/graphic/store_purchased_on.png")
		hdximg(istore_show_purchased_off)=LoadGraph("contents/graphic/store_purchased_off.png")
		hdximg(istore_category)=LoadGraph("contents/graphic/store_layer_curcategory.png")
		hdximg(istore_item_purchased)=LoadGraph("contents/graphic/store_item_purchased.png")
		hdximg(istore_icon_ticket)=LoadGraph("contents/graphic/store_icon_ticket.png")
		hdximg(istore_icon_fragment_0)=LoadGraph("contents/graphic/store_icon_fragment_0.png")
		hdximg(istore_icon_fragment_1)=LoadGraph("contents/graphic/store_icon_fragment_1.png")
		hdximg(istore_icon_tmp)=MakeScreen(150,150,TRUE)

		hdximg(imission_item)=LoadGraph("contents/graphic/mission_item.png")
		hdximg(imission_forced_bg)=LoadGraph("contents/graphic/mission_forced.png")
		hdximg(imission_forced_gauge)=LoadGraph("contents/graphic/mission_forced_gauge.png")

		//オブジェクトの配置
			repeat 6
				if duio_ButtonID2UIsetID(playoption_objplace_buttonid(cnt))==-1 :continue
				hdximg(iplayoption_objplace_normal_enabled+cnt)=MakeScreen(120,35,TRUE)
				SetDrawScreen hdximg(iplayoption_objplace_normal_enabled+cnt)
				DrawGraph 0,0,duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_objplace_buttonid(cnt))),TRUE
				DrawGraph 0,0,hdximg(iplayoption_enabled_120),TRUE
			loop

		//ゲージの難易度
			repeat 6
				if duio_ButtonID2UIsetID(playoption_gauge_buttonid(cnt))==-1 :continue
				hdximg(iplayoption_gauge_normal_enabled+cnt)=MakeScreen(120,35,TRUE)
				SetDrawScreen hdximg(iplayoption_gauge_normal_enabled+cnt)
				DrawGraph 0,0,duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_gauge_buttonid(cnt))),TRUE
				DrawGraph 0,0,hdximg(iplayoption_enabled_120),TRUE
			loop

		//ウィンドウレイアウト
			repeat 3
				if duio_ButtonID2UIsetID(playoption_window_buttonid(cnt))==-1 :continue
				hdximg(iplayoption_window_profile_enabled+cnt)=MakeScreen(180,35,TRUE)
				SetDrawScreen hdximg(iplayoption_window_profile_enabled+cnt)
				DrawGraph 0,0,duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_window_buttonid(cnt))),TRUE
				DrawGraph 0,0,hdximg(iplayoption_enabled_180),TRUE
			loop

		//目標スコア
			repeat 6
				if duio_ButtonID2UIsetID(playoption_target_buttonid(cnt))==-1 :continue
				hdximg(iplayoption_target_ex_enabled+cnt)=MakeScreen(120,35,TRUE)
				SetDrawScreen hdximg(iplayoption_target_ex_enabled+cnt)
				DrawGraph 0,0,duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_target_buttonid(cnt))),TRUE
				DrawGraph 0,0,hdximg(iplayoption_enabled_120),TRUE
			loop
			repeat 2+1
				if duio_ButtonID2UIsetID(playoption_target_buttonid(cnt+6))==-1 :continue
				hdximg(iplayoption_target_mybest_enabled+cnt)=MakeScreen(180,35,TRUE)
				SetDrawScreen hdximg(iplayoption_target_mybest_enabled+cnt)
				DrawGraph 0,0,duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_target_buttonid(cnt+6))),TRUE
				DrawGraph 0,0,hdximg(iplayoption_enabled_180),TRUE
			loop

		hdximg(igameplay_bg_sidelr)=MakeScreen(256,1024,TRUE)
		;hdximg(igameplay_bgorg_side_0)=LoadGraph("contents/graphic/gameplay_bg_effect_0.png")

		hdximg(igameplay_bg_grid)=MakeScreen(1024,1024,TRUE)
		hdximg(igameplay_bgorg_grid_0)=LoadGraph("contents/graphic/gameplay_bg_grid.png")

		;hdximg(igameplay_note_single_0)=LoadGraph("contents/graphic/gameplay_note_single_0.png")
		;hdximg(igameplay_note_hold_0)=LoadGraph("contents/graphic/gameplay_note_hold_0.png")
		hdximg(igameplay_lane)=MakeScreen(512/TexLv,2048/TexLv,TRUE)
		hdximg(igameplay_bg_lane)=LoadGraph("contents/graphic/gameplay_bg_lane.png")
		hdximg(igameplay_sidelane_l)=MakeScreen(128/TexLv,2048/TexLv,TRUE)
		hdximg(igameplay_sidelane_r)=MakeScreen(128/TexLv,2048/TexLv,TRUE)
		hdximg(igameplay_bg_sidelane)=LoadGraph("contents/graphic/gameplay_bg_lane_s.png")
		hdximg(igameplay_note_hold_long)=MakeScreen(128/TexLv,2048/TexLv,TRUE)
		hdximg(igameplay_copybuf)=MakeScreen((128+512+128)/TexLv,2048/TexLv,TRUE)

		hdximg(igameplay_judge_excellent)=LoadGraph("contents/graphic/gameplay_judge_excellent.png")
		hdximg(igameplay_judge_great)=LoadGraph("contents/graphic/gameplay_judge_great.png")
		hdximg(igameplay_judge_good)=LoadGraph("contents/graphic/gameplay_judge_good.png")
		hdximg(igameplay_judge_bad)=LoadGraph("contents/graphic/gameplay_judge_bad.png")
		hdximg(igameplay_judge_miss)=LoadGraph("contents/graphic/gameplay_judge_miss.png")

		hdximg(igameplay_laneeffect)=LoadGraph("contents/graphic/gameplay_laneeffect.png")

		hdximg(igameplay_graph_cur)=LoadGraph("contents/graphic/gameplay_graph_current.png")
		hdximg(igameplay_graph_mybest)=LoadGraph("contents/graphic/gameplay_graph_mybest.png")
		hdximg(igameplay_graph_target)=LoadGraph("contents/graphic/gameplay_graph_target.png")
		hdximg(igameplay_graph_reward)=LoadGraph("contents/graphic/gameplay_graph_reward.png")

		hdximg(igameplay_playtime_pre)=LoadGraph("contents/graphic/gameplay_playtime_pre.png")

		hdximg(igameplay_gauge_bg_inc)=LoadGraph("contents/graphic/gameplay_gauge_inc_bg.png")
		hdximg(igameplay_gauge_bg_dec)=LoadGraph("contents/graphic/gameplay_gauge_dec_bg.png")
		hdximg(igameplay_gauge_inc_0)=LoadGraph("contents/graphic/gameplay_gauge_inc_0.png")
		hdximg(igameplay_gauge_inc_1)=LoadGraph("contents/graphic/gameplay_gauge_inc_1.png")
		hdximg(igameplay_gauge_expert)=LoadGraph("contents/graphic/gameplay_gauge_expert.png")
		hdximg(igameplay_gauge_madness)=LoadGraph("contents/graphic/gameplay_gauge_madness.png")

		hdximg(igameplay_gauge_bgvalue)=LoadGraph("contents/graphic/gameplay_gauge_bg_value.png")

		hdximg(igameplay_bg_stgfailed)=LoadGraph("contents/package/res_stg/stg_Failed.ogv")
		hdximg(igameplay_bg_stgclear)=LoadGraph("contents/package/res_stg/stg_Clear.ogv")
		hdximg(igameplay_bg_stgfc)=LoadGraph("contents/package/res_stg/stg_FullCombo.ogv")
		hdximg(igameplay_bg_stgallex)=LoadGraph("contents/package/res_stg/stg_AllEx.ogv")

		hdximg(igameplay_bg_wall)=LoadGraph("contents/graphic/gameplay_bg_wall.png")

		hdximg(iresult_ratio_excellent)=LoadGraph("contents/graphic/result_ratio_excellent.png")
		hdximg(iresult_ratio_great)=LoadGraph("contents/graphic/result_ratio_great.png")
		hdximg(iresult_ratio_good)=LoadGraph("contents/graphic/result_ratio_good.png")
		hdximg(iresult_ratio_bad)=LoadGraph("contents/graphic/result_ratio_bad.png")
		hdximg(iresult_ratio_miss)=LoadGraph("contents/graphic/result_ratio_miss.png")

		hdximg(iresult_gaugegraph)=MakeScreen(700,100,TRUE)

		hdximg(iresult_rank_ex)=LoadGraph("contents/package/res_scorerank/Result_rank_ex.png")
		hdximg(iresult_rank_s)=LoadGraph("contents/package/res_scorerank/Result_rank_s.png")
		hdximg(iresult_rank_aaa)=LoadGraph("contents/package/res_scorerank/Result_rank_aaa.png")
		hdximg(iresult_rank_aa)=LoadGraph("contents/package/res_scorerank/Result_rank_aa.png")
		hdximg(iresult_rank_a)=LoadGraph("contents/package/res_scorerank/Result_rank_a.png")
		hdximg(iresult_rank_b)=LoadGraph("contents/package/res_scorerank/Result_rank_b.png")
		hdximg(iresult_rank_c)=LoadGraph("contents/package/res_scorerank/Result_rank_c.png")
		hdximg(iresult_rank_d)=LoadGraph("contents/package/res_scorerank/Result_rank_d.png")
		hdximg(iresult_rank_e)=LoadGraph("contents/package/res_scorerank/Result_rank_e.png")
		hdximg(iresult_rank_f)=LoadGraph("contents/package/res_scorerank/Result_rank_f.png")

		hdximg(iprofile_customize_bg_0)=LoadGraph("contents/graphic/profile_customize_bg_0.png")
		hdximg(iprofile_customize_bg_1)=LoadGraph("contents/graphic/profile_customize_bg_1.png")

		hdximg(icommon_connecting)=LoadGraph("contents/graphic/common_connecting.png")

		dim hdximgarr_gameplay_particle,8
		repeat 8
			hdximgarr_gameplay_particle(cnt)=LoadGraph("contents/package/res_effect_particle/effect_Particle_"+cnt+".png")
		loop

		dim hdximgarr_load_connect,28
		repeat 28
			hdximgarr_load_connect(cnt)=LoadGraph("contents/package/res_loadframe_connect/if"+strf("%02d",cnt+1)+".png")
		loop

		hdximg(iembvideo_seek)=MakeScreen(1280,10,TRUE)
		hdximg(iembvideo_seekorg)=LoadGraph("contents/graphic/embvideo_seek.png")

		dim hdximgarr_titlelogo,120
		repeat 120
			hdximgarr_titlelogo(cnt)=LoadGraph("contents/package/res_titlelogo/f"+strf("%04d.png",cnt))
		loop

	//グローバル変数
		sdim curSceneTag
		dim i
		dim cursorPosX
		dim cursorPosY
		ddim cursorWheelraw,1
		ddim bfCursorWheelraw,1
		dim cursorWheelEase
		dim cursorWheelCount
		dim cursorStatus
		dim bfcursorStatus
		dim SceneCount
		dim FrameCount
		ddim CurFPS
		ddim SumFPS
		ddim AvgFPS
		dim FPSkeepCount_std
		dim FPSkeepCount
		dim SubThreadCount
		dim DrawThreadTime
		dim SubThreadTime
		dim bfKeyInputFlag,256
		dim KeyInputFlag,256
		dim KeyInputTime,256
		dim DebugMode
		dim GameplayMode
		dim UnlimitedTime
		dim UnlimitedTime_textUIsetID

	//ライブラリ読み込み
		sdim mapgroup
		dim mapgroup_max
		repeat
			mapgroup(cnt)=duio_idsGet("map@"+cnt)
			if mapgroup(cnt)=="" :break
			mapgroup_max++
		loop

		sdim map_uuid,64,mapgroup_max,3
		sdim map_path,64,mapgroup_max,3
		sdim map_buf,1024*256,mapgroup_max,3
		dim map_buf_size,mapgroup_max,3

		//メタデータ
		sdim mapdb_title,64,mapgroup_max,3			//曲名
		sdim mapdb_artist,64,mapgroup_max,3		//アーティスト名
		sdim mapdb_source,64,mapgroup_max,3		//提供元
		sdim mapdb_resource,64,mapgroup_max,3		//リソースID
		dim mapdb_difficulty,mapgroup_max,3		//難易度区分
		dim mapdb_level,mapgroup_max,3			//難易度
		sdim mapdb_artworkpath,64,mapgroup_max,3	//ジャケット画像のパス
		dim mapdb_hartwork,mapgroup_max,3			//ジャケット画像のハンドル
		ddim mapdb_defbpm,mapgroup_max,3			//既定のBPM値
		ddim mapdb_minbpm,mapgroup_max,3			//最低のBPM値
		ddim mapdb_maxbpm,mapgroup_max,3			//最高のBPM値
		dim mapdb_totalnotes,mapgroup_max,3		//合計オブジェクト数
		dim mapdb_release,mapgroup_max,3			//リリースされたバージョン（0=legacy,1=v2）
		sdim mapdb_mapdesign,64,mapgroup_max,3		//譜面製作者
		dim mapdb_hpreview_smp,mapgroup_max,3		//プレビュー音声のハンドル（サンプル）
		dim mapdb_hpreview,mapgroup_max,3			//プレビュー音声のハンドル
		dim mapdb_unlocklepus,mapgroup_max,3		//アンロックに必要なLepus（0=アンロック済み、1以上=Lepusでアンロック、-1=ミッションのみでアンロック）

		//IRデータ
		dim mapdb_ir_score,mapgroup_max,3,100		//IRスコア
		sdim mapdb_ir_name,64,mapgroup_max,3,100	//IR登録名
		dim mapdb_ir_myrank,mapgroup_max,3			//IRの自分の順位
		dim mapdb_ir_regmax,mapgroup_max,3			//IRの登録数

		//自己ベストデータ
		dim mapdb_mybest_score,mapgroup_max,3				//スコア
		ddim mapdb_mybest_pfpoint,mapgroup_max,3			//能力値
		dim mapdb_mybest_judgedetail,mapgroup_max,3,7		//判定詳細
		ddim mapdb_mybest_judgerate,mapgroup_max,3,7			//判定詳細（レート）
		sdim mapdb_mybest_cleartype,64,mapgroup_max,3		//クリアの種類
		dim mapdb_mybest_maxcombo,mapgroup_max,3			//最大コンボ
		sdim mapdb_mybest_regdate,64,mapgroup_max,3			//記録日時
		sdim mapdb_mybest_gauge4binhex,350,mapgroup_max,3		//ゲージ推移
		sdim mapdb_mybest_score4binhex,2048,mapgroup_max,3	//スコア推移

		dim item:dim lv
		repeat mapgroup_max
			split mapgroup(cnt),",",map_uuid(cnt,0),map_uuid(cnt,1),map_uuid(cnt,2)
			item=cnt
			repeat 3
				lv=cnt
				if map_uuid(item,lv)=="*" :continue

				gosub*UpdatePreloader

				map_path(item,lv)="contents/maps/"+map_uuid(item,lv)+".m2o"
				exist map_path(item,lv)
				if strsize==-1 {
					OpenErrorDialog"MFM0000"
					goto*Exit
				} else {
					map_buf_size(item,lv)=strsize
					memexpand map_buf(item,lv),map_buf_size(item,lv)	//メモリ領域を拡張
					bload map_path(item,lv),map_buf(item,lv)

					//ファイルのシグネチャを確認
					if (peek(map_buf(item,lv),0)!'v')|(peek(map_buf(item,lv),1)!'2')|(peek(map_buf(item,lv),2)!'o')|(peek(map_buf(item,lv),3)!'p') {
						OpenErrorDialog"MFM0001"
						goto*Exit
					}

					dim binpos		//バイナリ検索位置
					dim binlength		//データ長
					sdim tmpmapbuf
					memexpand tmpmapbuf,map_buf_size(item,lv)
					memcpy tmpmapbuf,map_buf(item,lv),map_buf_size(item,lv),0,0

					binpos+4+4

					//既定値
					mapdb_mapdesign(item,lv)="puoro."
					mapdb_artworkpath(item,lv)="img.png"

					repeat

						;logmes GetTimeStamp()+" [Processing] Search syntax ("+binpos+"/"+map_buf_size(item,lv)+" , chunktype="+peek(tmpmapbuf,binpos)+")"
						switch peek(tmpmapbuf,binpos)

							//Title
							case ID_TITLE
								binlength=peek(tmpmapbuf,binpos+1)
								memexpand mapdb_title(item,lv),binlength
								memcpy mapdb_title(item,lv),tmpmapbuf,binlength,0,binpos+2
								binpos+2+binlength
							swbreak

							//Artist
							case ID_ARTIST
								binlength=peek(tmpmapbuf,binpos+1)
								memexpand mapdb_artist(item,lv),binlength
								memcpy mapdb_artist(item,lv),tmpmapbuf,binlength,0,binpos+2
								binpos+2+binlength
							swbreak

							//Source
							case ID_SOURCE
								binlength=peek(tmpmapbuf,binpos+1)
								memexpand mapdb_source(item,lv),binlength
								memcpy mapdb_source(item,lv),tmpmapbuf,binlength,0,binpos+2
								binpos+2+binlength
							swbreak

							//Resource
							case ID_RESOURCEID
								binlength=peek(tmpmapbuf,binpos+1)
								memexpand mapdb_resource(item,lv),binlength
								memcpy mapdb_resource(item,lv),tmpmapbuf,binlength,0,binpos+2
								binpos+2+binlength
							swbreak

							//Artwork
							case ID_ARTWORK
								binlength=peek(tmpmapbuf,binpos+1)
								memexpand mapdb_artworkpath(item,lv),binlength
								memcpy mapdb_artworkpath(item,lv),tmpmapbuf,binlength,0,binpos+2
								binpos+2+binlength
							swbreak

							//MapDesign
							case ID_MAPDESIGN
								binlength=peek(tmpmapbuf,binpos+1)
								memexpand mapdb_mapdesign(item,lv),binlength
								memcpy mapdb_mapdesign(item,lv),tmpmapbuf,binlength,0,binpos+2
								binpos+2+binlength
							swbreak

							//Level
							case ID_LEVEL
								dim binsearchvalue
								binsearchvalue=peek(tmpmapbuf,binpos+1)
								if binsearchvalue&16 {
									mapdb_difficulty(item,lv)=ID_DIFFICULTY_NORMAL
									mapdb_level(item,lv)=binsearchvalue-16
								}
								if binsearchvalue&32 {
									mapdb_difficulty(item,lv)=ID_DIFFICULTY_HARD
									mapdb_level(item,lv)=binsearchvalue-32
								}
								if binsearchvalue&64 {
									mapdb_difficulty(item,lv)=ID_DIFFICULTY_CHAOS
									mapdb_level(item,lv)=binsearchvalue-64
								}
								binpos+2
							swbreak

							//Release
							case ID_RELEASE
								mapdb_release=lpeek(tmpmapbuf,binpos+1)
								binpos+5
							swbreak

							case ID_BGVIDEO_COMMON:binpos+2:swbreak
							case ID_BGVIDEO_PATH:binpos+2+peek(tmpmapbuf,binpos+1):swbreak
							case ID_BGAUDIO:binpos+2+peek(tmpmapbuf,binpos+1):swbreak
							case ID_UNLOCKINFO
								if peek(tmpmapbuf,binpos+1)==1 :mapdb_unlocklepus(item,lv)=lpeek(tmpmapbuf,binpos+2)
								if peek(tmpmapbuf,binpos+1)==2 :mapdb_unlocklepus(item,lv)=-1
								binpos+6
							swbreak
							case ID_TOTALOFFSET:binpos+3:swbreak
							case ID_EVENTOFFSET:binpos+3:swbreak
							case ID_BGVIDEO_OFFSET:binpos+3:swbreak
							case ID_BGAUDIO_OFFSET:binpos+3:swbreak
							case ID_AUDIOENCODE:binpos+2+peek(tmpmapbuf,binpos+1):swbreak

							case ID_SOUNDSET:binpos+4+peek(tmpmapbuf,binpos+3):swbreak
							case ID_SOUNDPLAY:binpos+8:swbreak
							case ID_BPM
								if mapdb_defbpm(item,lv)==0 {
									mapdb_defbpm(item,lv)=f2d(lpeek(tmpmapbuf,binpos+5))
									mapdb_maxbpm(item,lv)=mapdb_defbpm(item,lv)
									mapdb_minbpm(item,lv)=mapdb_defbpm(item,lv)
								} else {
									if f2d(lpeek(tmpmapbuf,binpos+5))>mapdb_maxbpm(item,lv) {
										mapdb_maxbpm(item,lv)=f2d(lpeek(tmpmapbuf,binpos+5))
									}
									if f2d(lpeek(tmpmapbuf,binpos+5))<mapdb_minbpm(item,lv) {
										mapdb_minbpm(item,lv)=f2d(lpeek(tmpmapbuf,binpos+5))
									}
								}
								binpos+9
							swbreak
							case ID_NOTEHOLDSTART:mapdb_totalnotes(item,lv)+2:binpos+13:swbreak
							case ID_NOTESINGLE:mapdb_totalnotes(item,lv)++:binpos+9:swbreak

							//拡張命令
							case ID_EXTEND
								binpos++
								switch peek(tmpmapbuf,binpos)
								swend
							swbreak

							//終端を見つけたので終了
							case ID_EOF:break:swbreak

							//不明
							default
								logmes GetTimeStamp()+" [Warning] Invalid syntax (file="+map_path(item,lv)+",position="+binpos+",chunktype="+peek(tmpmapbuf,binpos)+")"
								OpenErrorDialog"MFM0002"
								goto*Exit
							swbreak

						swend
						
						//検索位置がファイルサイズを超えたら終了
						if binpos+1>map_buf_size(item,lv) :break
					loop

					mapdb_hartwork(item,lv)=LoadGraph("contents/maps/"+mapdb_resource(item,lv)+"/"+mapdb_artworkpath(item,lv))
					if mapdb_hartwork(item,lv)=-1 {
						mapdb_hartwork(item,lv)=LoadGraph("contents/graphic/common_artwork.png")
					}

					mapdb_hpreview_smp(item,lv)=cfunc64i(BASS_SampleLoad,FALSE,"contents/maps/"+mapdb_resource(item,lv)+"/preview.wav",0,0,16,0)
					if mapdb_hpreview_smp(item,lv)==0 :mapdb_hpreview_smp(item,lv)=cfunc64i(BASS_SampleLoad,FALSE,"contents/maps/"+mapdb_resource(item,lv)+"/preview.ogg",0,0,16,0)
					mapdb_hpreview(item,lv)=cfunc64i(BASS_SampleGetChannel,mapdb_hpreview_smp(item,lv),0)
					cfunc64v BASS_ChannelSetAttribute,mapdb_hpreview(item,lv),BASS_ATTRIB_VOL,d2f(0.5)
				}
			loop
		loop

		//IR
			;gosub*syncIR

		gosub*syncAllSavedata
		if stat<0 {
			PlayerID=""
			PlayerPassword=""
		}


	//初期状態
	;SetWindowVisibleFlag TRUE

	//オプション画面のボタン配置
		dim playoption_objplace_hbuttonimg,6,2
		repeat 6
			playoption_objplace_hbuttonimg(cnt,0)=duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_objplace_buttonid(cnt)))
			playoption_objplace_hbuttonimg(cnt,1)=hdximg(iplayoption_objplace_normal_enabled+cnt)
		loop
		dim playoption_gauge_hbuttonimg,6,2
		repeat 6
			playoption_gauge_hbuttonimg(cnt,0)=duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_gauge_buttonid(cnt)))
			playoption_gauge_hbuttonimg(cnt,1)=hdximg(iplayoption_gauge_normal_enabled+cnt)
		loop
		dim playoption_window_hbuttonimg,3,2
		repeat 3
			playoption_window_hbuttonimg(cnt,0)=duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_window_buttonid(cnt)))
			playoption_window_hbuttonimg(cnt,1)=hdximg(iplayoption_window_profile_enabled+cnt)
		loop
		dim playoption_target_hbuttonimg,8+1,2
		repeat 8+1
			playoption_target_hbuttonimg(cnt,0)=duio_GetButtonhImg(duio_ButtonID2UIsetID(playoption_target_buttonid(cnt)))
			playoption_target_hbuttonimg(cnt,1)=hdximg(iplayoption_target_ex_enabled+cnt)
		loop

	//FPS測定初期化
		duio_Draw""

		dim DEVMODE,156/4
		cfunc64v EnumDisplaySettings,0,-1,varptr64(DEVMODE)
		duio_SetFPS DEVMODE(30)

	curSceneTag="#Title"
	gosub*scene_Title_Init
	;gosub*scene_Lobby_Init
	;gosub*scene_Result_Init
	;gosub*scene_MusicSelect_Init
	;gosub*scene_Gameplay_Init

	duio_ChangeTextBody duio_TextID2UIsetID("common_unlimitedtime"),""
	duio_ChangeTextBody duio_TextID2UIsetID("gameplay_unlimitedtime"),""

*MainLoop

	duio_DeleteEventStack

	FPSkeepCount_std=GetNowCount()

	if ProcessMessage()==-1 :goto*Exit

	SceneTime=int(1000.0/duio_GetFPS()*SceneCount)
	FrameTime=1000/duio_GetFPS()

	repeat 256
		KeyInputFlag(cnt)=CheckHitKey(cnt)
		if KeyInputFlag(cnt)&bfKeyInputFlag(cnt) :KeyInputTime(cnt)+FrameTime:else:KeyInputTime(cnt)=0
	loop

	//カーソル座標
		cfunc64v GetMousePoint,varptr64(cursorPosX),varptr64(cursorPosY)
		cursorStatus=GetMouseInput()

		cursorPosX=int(double(cursorPosX)*(double(BufWidth)/double(DispWidth)))
		cursorPosY=int(double(cursorPosY)*(double(BufHeight)/double(DispHeight)))
		cursorWheelraw=(cfunc64f(GetMouseWheelRotVolF))
		if cursorWheelraw<0&bfcursorWheelraw<0&cursorWheelraw!bfcursorWheelraw :cursorWheelEase=int((cursorWheelraw-bfcursorWheelraw)*40.0):cursorWheelCount=0
		if cursorWheelraw>0&bfcursorWheelraw>0&cursorWheelraw!bfcursorWheelraw :cursorWheelEase=int((cursorWheelraw-bfcursorWheelraw)*40.0):cursorWheelCount=0
		if (cursorWheelraw>0&bfcursorWheelraw<0)|(cursorWheelraw<0&bfcursorWheelraw>0) :cursorWheelEase=int(cursorWheelraw*40.0):cursorWheelCount=0
		setease cursorWheelEase,0,ease_cubic_out
		cursorWheel=getease(cursorWheelCount,320)
		cursorWheelCount+(1000/limitf(CurFPS,1.0))

	//Unlimitedモード時間
		if UnlimitedTime!0 {
			duio_ChangeTextBody duio_TextID2UIsetID("gameplay_unlimitedtime"),strf("Unlimited Mode - 残り%d分%02d秒",UnlimitedTime/1000/60,UnlimitedTime/1000\60)
			duio_ChangeTextBody duio_TextID2UIsetID("common_unlimitedtime"),strf("Unlimited Mode - 残り%d分%02d秒",UnlimitedTime/1000/60,UnlimitedTime/1000\60)
			UnlimitedTime-FrameTime
			if UnlimitedTime<=0 {
				duio_ChangeTextBody duio_TextID2UIsetID("gameplay_unlimitedtime"),""
				duio_ChangeTextBody duio_TextID2UIsetID("common_unlimitedtime"),""
				UnlimitedTime=0
			}
		}

	//画面の描画先の設定と初期化
		SetDrawScreen hcommonLayer
		ClearDrawScreen

		dim VECTORpos:dim VECTORtarget
		VECTORpos=d2f(0),d2f(-1000),d2f(1200)
		VECTORtarget=d2f(0),d2f(1400),d2f(0)
		cfunc64v SetCameraPositionAndTarget_UpVecY,varptr64(VECTORpos),varptr64(VECTORtarget)
		SetupCamera_Perspective deg2rad(50.0)

	//シーン別
		switch curSceneTag
			case"#Title":gosub*scene_Title:swbreak
			case"#Lobby":gosub*scene_Lobby:swbreak
			case"#MusicSelect":gosub*scene_MusicSelect:swbreak
			case"#Gameplay":gosub*scene_Gameplay:swbreak
			case"#Result":gosub*scene_Result:swbreak
			case"#Store":gosub*scene_Store:swbreak
			case"#Mission":gosub*scene_Mission:swbreak
			case"#Tutorial":gosub*scene_Tutorial:swbreak
			case"#Profile":gosub*scene_Profile:swbreak
			case"#Config":gosub*scene_Config:swbreak
		swend

	//マウスカーソル
		SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
		DrawGraph cursorPosX,cursorPosY,hdximg(icommon_cursor),TRUE

	//スケーリング
		SetDrawScreen DX_SCREEN_BACK
		ClearDrawScreen

		DrawExtendGraph 0,0,DispWidth,DispHeight,hcommonLayer,TRUE

	//デバッグ
		CurFPS=double(cfunc64f(GetFPS))
		SumFPS+CurFPS
		if FrameCount\60==0 :AvgFPS=SumFPS/60.0:SumFPS=0.0
		if DebugMode {
			DrawOverlayString 0,0,"MainThread FPS="+strf("%.2f",CurFPS)
			DrawOverlayString 0,20,"MainThread Average-FPS="+strf("%.2f",AvgFPS)
			DrawOverlayString 0,40,"SubThread FPS="+strf("%.2f",CurFPS*double(SubThreadCount))
			DrawOverlayString 0,60,"Draw "+DrawThreadTime+"ms , SubThread "+SubThreadTime+" ms"
			DrawOverlayString 0,80,"Cursor ("+cursorPosX+","+cursorPosY+") w="+cursorWheel
			DrawOverlayString 0,100,"Scene="+curSceneTag
		}

	if CheckHitKey(KEY_INPUT_HOME) {
		repeat UIset_Button_max:UIset_Button_count(cnt)=0:loop
		repeat UIset_Text_max:UIset_Text_count(cnt)=0:loop
		repeat UIset_Image_max:UIset_Image_count(cnt)=0:loop
	}

	bfcursorStatus=cursorStatus
	bfCursorWheelraw=cursorWheelraw

	if CheckHitKey(KEY_INPUT_F11) :duio_InitAllCount"#Config"

	repeat 256
		bfKeyInputFlag(cnt)=KeyInputFlag(cnt)
	loop

	SceneCount++
	FrameCount++

	//サブスレッド
		SubThreadCount=0
		DrawThreadTime=GetNowCount()-FPSkeepCount_std
		repeat abs(SubThreadLimit)

			if ((GetNowCount()-FPSkeepCount_std)>(1000/duio_GetFPS()-SubThreadTime-1))&SubThreadLimit>0&cnt!0 :break

			switch curSceneTag
				case"#Gameplay"
					gosub*scene_Gameplay_subThread
				swbreak
			swend

			if cnt==0 :SubThreadTime=GetNowCount()-FPSkeepCount_std-DrawThreadTime

			SubThreadCount++
			await 1
		loop

	ScreenFlip

	goto*MainLoop

*onshutter

	//トランジションエフェクト (in)
		duio_PlaySound"shutter_in"

		duio_SetImageVisible duio_ImageID2UIsetID("shutter_10"),TRUE
		duio_SetImageVisible duio_ImageID2UIsetID("shutter_11"),TRUE
		duio_SetImageVisible duio_ImageID2UIsetID("shutter_00"),TRUE
		duio_SetImageVisible duio_ImageID2UIsetID("shutter_01"),TRUE

	return

*SystemError
	ExportDebugLog
	end

*Exit

	gosub*UploadAllSavedata

	ExportDebugLog
	DxLib_End
	end